{{- $cluster := "$cluster" -}}
{{- if .Values.kubecube.dashboard.multicluster -}}
    {{- $cluster = "$cluster" -}}
{{- else -}}
    {{- $cluster = "" -}}
{{- end -}}
apiVersion: monitoring.kubecube.io/v1
kind: Dashboard
metadata:
  name: cube-resource-cluster
  namespace: kube-public
  labels:
    app: {{ template "kube-prometheus-stack.name" $ }}-dashboard
{{ include "kube-prometheus-stack.labels" $ | indent 4 }}
spec:
  title: cube-resource-cluster
  rows:
  - name: 集群状态
    panels:
    - singleStat:
        title: Cpu 利用率
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "1 - avg(rate(node_cpu_seconds_total{mode=\"idle\", cluster=\"{{ $cluster }}\"}[2m]))"
            instant: true
    - singleStat:
        title: Cpu Request 水位
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "sum(namespace_cpu:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) / sum(kube_node_status_allocatable{resource=\"cpu\",cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: Cpu Limit 水位
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"cpu\"}) / sum(kube_node_status_allocatable{resource=\"cpu\",cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: 内存利用率
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "1 - sum(:node_memory_MemAvailable_bytes:sum{cluster=\"{{ $cluster }}\"}) / sum(node_memory_MemTotal_bytes{cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: 内存 Requests 水位
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "sum(namespace_memory:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) / sum(kube_node_status_allocatable{resource=\"memory\",cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: 内存 Limits 水位
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"memory\"}) / sum(kube_node_status_allocatable{resource=\"memory\",cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: 节点数量
        datasource: Prometheus
        span: 2
        linkUrl: "/platform/cluster/$cluster/node"
        targets:
        - prometheus:
            query: "count (kube_node_info{cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: 文件系统使用率
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "sum (
  max without (fstype, mountpoint) (
    node_filesystem_size_bytes{cluster=\"{{ $cluster }}\",job=\"node-exporter\", fstype!=\"\"} - node_filesystem_avail_bytes{cluster=\"{{ $cluster }}\",job=\"node-exporter\", fstype!=\"\"}
  )
)
/ scalar(sum(max without (fstype, mountpoint) (node_filesystem_size_bytes{cluster=\"{{ $cluster }}\",job=\"node-exporter\", fstype!=\"\"})))"
            instant: true
    - singleStat:
        title: APIServers Up %
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "count(up{cluster=\"{{ $cluster }}\",job=\"apiserver\"} == 1) / count(up{cluster=\"{{ $cluster }}\",job=\"apiserver\"})"
            instant: true
    - singleStat:
        title: ControllerManagers Up %
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "count(up{cluster=\"{{ $cluster }}\",job=\"kube-controller-manager\"} == 1) / count(up{cluster=\"{{ $cluster }}\",job=\"kube-controller-manager\"})"
            instant: true
    - singleStat:
        title: Schedulers Up %
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "count(up{cluster=\"{{ $cluster }}\",job=\"kube-scheduler\"} == 1) / count(up{cluster=\"{{ $cluster }}\",job=\"kube-scheduler\"})"
            instant: true
    - singleStat:
        title: Etcds Up %
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "count(up{cluster=\"{{ $cluster }}\",job=\"kube-etcd\"} == 1) / count(up{cluster=\"{{ $cluster }}\",job=\"kube-etcd\"})"
            instant: true
  - name: 集群健康
    panels:
    - singleStat:
        title: 磁盘预警节点数量
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_node_status_condition{cluster=\"{{ $cluster }}\",condition=\"DiskPressure\",status=\"true\"} == 1)"
            instant: true
    - singleStat:
        title: 内存预警节点数量
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_node_status_condition{cluster=\"{{ $cluster }}\",condition=\"MemoryPressure\",status=\"true\"} == 1)"
            instant: true
    - singleStat:
        title: 网络异常节点数量
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_node_status_condition{cluster=\"{{ $cluster }}\",condition=\"NetworkUnavailable\",status=\"true\"} == 1)"
            instant: true
    - singleStat:
        title: 未就绪节点数量
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_node_info{cluster=\"{{ $cluster }}\"}) - count (kube_node_status_condition{cluster=\"{{ $cluster }}\",condition=\"Ready\",status=\"true\"} == 1)"
            instant: true
    - singleStat:
        title: 不可调度节点数量
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_node_spec_unschedulable{cluster=\"{{ $cluster }}\"} == 1)"
            instant: true
    - singleStat:
        title: 未就绪副本数
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_pod_container_status_waiting_reason{cluster=\"{{ $cluster }}\",reason=\"CrashLoopBackOff\"} == 1)"
            instant: true
  - name: 节点容量规划
    panels:
    - table:
        title: 节点资源使用
        span: 12
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum(kube_pod_info{cluster=\"{{ $cluster }}\",node!=\"\"}) by (node)"
            format: table
            instant: true
            ref: A
        - prometheus:
            query: "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: B
        - prometheus:
            query: "sum(node_cpu:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) by (node) / sum(kube_node_status_allocatable{resource=\"cpu\",cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: C
        - prometheus:
            query: "sum(node_cpu:kube_pod_container_resource_limits:sum{cluster=\"{{ $cluster }}\"}) by (node) / sum(kube_node_status_allocatable{resource=\"cpu\",cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: D
        - prometheus:
            query: "sum(kube_node_status_allocatable_cpu_cores{cluster=\"{{ $cluster }}\"}) by (node) - sum(node_cpu:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: E
        - prometheus:
            query: "sum (node_namespace_pod_container:container_memory_working_set_bytes{cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: F
        - prometheus:
            query: "sum(node_memory:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) by (node)/ sum(kube_node_status_allocatable{resource=\"memory\",cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: G
        - prometheus:
            query: "sum(node_memory:kube_pod_container_resource_limits:sum{cluster=\"{{ $cluster }}\"}) by (node)/ sum(kube_node_status_allocatable{resource=\"memory\",cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: H
        - prometheus:
            query: "sum(kube_node_status_allocatable_memory_bytes{cluster=\"{{ $cluster }}\"}) by (node) - sum(node_memory:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: I
        styles:
        - alias: 节点
          pattern: node
          link: true
          linkUrl: "/platform/cluster/$cluster/$__cell/monitor"
        - alias: pod个数
          pattern: "Value #A"
        - alias: CPU实际使用量
          pattern: "Value #B"
        - alias: CPU Requests 水位
          pattern: "Value #C"
          unit: percentunit
        - alias: CPU Limits 水位
          pattern: "Value #D"
          unit: percentunit
        - alias: CPU Requests剩余量(Cores)
          pattern: "Value #E"
        - alias: 内存实际使用
          pattern: "Value #F"
          unit: bytes
        - alias: 内存 Requests 水位
          pattern: "Value #G"
          unit: percentunit
        - alias: 内存 Limits 水位
          pattern: "Value #H"
          unit: percentunit
        - alias: 内存 Requests 剩余量
          pattern: "Value #I"
          unit: bytes
  - name: 空间资源规划
    panels:
    - graph:
        title: CPU 使用量
        span: 12
        stack: true
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"{{ $cluster }}\"}) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: cores
    - table:
        title: CPU 配额
        span: 12
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum(kube_pod_owner{cluster=\"{{ $cluster }}\"}) by (namespace)"
            format: table
            instant: true
            ref: A
        - prometheus:
            query: "count(avg(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"{{ $cluster }}\"}) by (workload, namespace)) by (namespace)"
            format: table
            instant: true
            ref: B
        - prometheus:
            query: "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"{{ $cluster }}\"}) by (namespace)"
            format: table
            instant: true
            ref: C
        - prometheus:
            query: "sum(namespace_cpu:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) by (namespace)"
            format: table
            instant: true
            ref: D
        - prometheus:
            query: "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"{{ $cluster }}\"}) by (namespace) / sum(kube_pod_container_resource_requests{cluster=\"{{ $cluster }}\", resource=\"cpu\"}) by (namespace)"
            format: table
            instant: true
            ref: E
        - prometheus:
            query: "sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"cpu\"}) by (namespace)"
            format: table
            instant: true
            ref: F
        - prometheus:
            query: "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"{{ $cluster }}\"}) by (namespace) / sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"cpu\"}) by (namespace)"
            format: table
            instant: true
            ref: G
        styles:
        - alias: 空间
          pattern: namespace
        - alias: Pods
          pattern: "Value #A"
        - alias: Workloads
          pattern: "Value #B"
        - alias: CPU 使用量
          pattern: "Value #C"
        - alias: CPU Requests(Cores)
          pattern: "Value #D"
        - alias: CPU使用率(/Requests)
          pattern: "Value #E"
          unit: percentunit
        - alias:  CPU Limits(Cores)
          pattern: "Value #F"
        - alias: CPU 使用率(/Limits)
          pattern: "Value #G"
          unit: percentunit
    - graph:
        title: 内存使用量(不含 Cache)
        span: 12
        stack: true
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum(container_memory_rss{cluster=\"{{ $cluster }}\", container!=\"\"}) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: bytes
    - table:
        title: 内存配额
        span: 12
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum(kube_pod_owner{cluster=\"{{ $cluster }}\"}) by (namespace)"
            format: table
            instant: true
            ref: A
        - prometheus:
            query: "count(avg(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"{{ $cluster }}\"}) by (workload, namespace)) by (namespace)"
            format: table
            instant: true
            ref: B
        - prometheus:
            query: "sum(container_memory_rss{cluster=\"{{ $cluster }}\", container!=\"\"}) by (namespace)"
            format: table
            instant: true
            ref: C
        - prometheus:
            query: "sum(kube_pod_container_resource_requests{cluster=\"{{ $cluster }}\", resource=\"memory\"}) by (namespace)"
            format: table
            instant: true
            ref: D
        - prometheus:
            query: "sum(container_memory_rss{cluster=\"{{ $cluster }}\", container!=\"\"}) by (namespace) / sum(kube_pod_container_resource_requests{cluster=\"{{ $cluster }}\", resource=\"memory\"}) by (namespace)"
            format: table
            instant: true
            ref: E
        - prometheus:
            query: "sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"memory\"}) by (namespace)"
            format: table
            instant: true
            ref: F
        - prometheus:
            query: "sum(container_memory_rss{cluster=\"{{ $cluster }}\", container!=\"\"}) by (namespace) / sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"memory\"}) by (namespace)"
            format: table
            instant: true
            ref: G
        styles:
        - alias: 空间
          pattern: namespace
        - alias: Pods
          pattern: "Value #A"
        - alias: Workloads
          pattern: "Value #B"
        - alias: 内存使用量
          pattern: "Value #C"
          unit: bytes
        - alias: 内存 Requests
          pattern: "Value #D"
          unit: bytes
        - alias: 内存使用率(/Requests)
          pattern: "Value #E"
          unit: percentunit
        - alias: 内存 Limits
          pattern: "Value #F"
          unit: bytes
        - alias: 内存使用率(/Limits)
          pattern: "Value #G"
          unit: percentunit
  - name: 网络带宽
    panels:
    - graph:
        title: 网络带宽-流入
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_receive_bytes_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: Bps
    - graph:
        title: 网络带宽-流出
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_transmit_bytes_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: Bps
  - name: 网络包速率
    panels:
    - graph:
        title: 收包速率
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_receive_packets_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: pps
    - graph:
        title: 发包速率
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_transmit_packets_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: pps
  - name: 网络丢包率
    panels:
    - graph:
        title: 丢包率-流入
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_receive_packets_dropped_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: pps
    - graph:
        title: 丢包率-流出
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_transmit_packets_dropped_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: pps
  - name: 磁盘 IO 分布
    panels:
    - graph:
        title: IOPS(读+写)
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "ceil(sum by(namespace) (rate(container_fs_reads_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]) + rate(container_fs_writes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m])))"
            legend: "{{`{{`}}namespace{{`}}`}}"
    - graph:
        title: 吞吐量(读+写)
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_reads_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]) + rate(container_fs_writes_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: Bps
    - table:
        title: 当前磁盘IO值
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_reads_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: A
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_writes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: B
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_reads_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]) + rate(container_fs_writes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: C
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_reads_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: D
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_writes_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: E
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_reads_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]) + rate(container_fs_writes_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: F
        hiddenColumns: ["Time"]
        styles:
        - pattern: "namespace"
          alias: Namespace
        - pattern: "Value #A"
          alias: IOPS(读)
        - pattern: "Value #B"
          alias: IOPS(写)
        - pattern: "Value #C"
          alias: IOPS(读+写)
        - pattern: "Value #D"
          alias: 读吞吐量
          unit: Bps
        - pattern: "Value #E"
          alias: 写吞吐量
          unit: Bps
        - pattern: "Value #F"
          alias: 吞吐量(读+写)
          unit: Bps

